{"ast":null,"code":"var _jsxFileName = \"D:\\\\University UE Projects\\\\GroupProject\\\\mybranch\\\\SDGP-GroupF-React-project\\\\project\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport \"./components/css/styles.scss\";\nimport { Route, Routes, useNavigate } from \"react-router-dom\"; //BrowserRouter isn't required because it exists in index.tsx\nimport Header from \"./components/uniComponents/Header\";\nimport Footer from \"./components/uniComponents/Footer\";\nimport Login from \"./components/uniComponents/Login\";\nimport UserChoice from \"./components/uniComponents/choiceComponents/UserChoice\";\nimport { useState } from \"react\";\n\n/*\r\n\r\nThe way routing is setup is like so: depending on which user button is chosen (admin, doctor, patient), \r\nthe login component passes three arrays containing links, labels and routes to this component (main), \r\nthese arrays are then put through the create functions (createLinks, labels, etcetera…) and they push \r\nthose array elements into the headerLabels, headerLinks and headerRoutes arrays here, finally the \r\ncreateFinalRoutes function is used to create the routes and the links and labels are put into the header \r\ncomponent’s props, and those are used to create the elements in the header that are used to navigate.\r\n\r\n*/\n\n//These 3 constants, header links, labels and routes are all used for navigation.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet headerLinks = [];\nlet headerLabels = [];\nlet headerRoutes = [];\nlet routeCreator = []; //This is array is used to store our route components, which are later put on the site\n\nfunction App() {\n  _s();\n  //Interface is defined for useState\n\n  //This useState is used to update the header depending on the type of user (doctor, patient, etcetera...)\n  const [header, setHeader] = useState({\n    linkState: headerLinks,\n    labelState: headerLabels,\n    routerState: headerRoutes\n  });\n\n  //Used for setting visibility upon login\n  const [loginIsVisible, setLoginIsVisible] = useState(true);\n  const [backIsVisible, setBackIsVisible] = useState(false);\n\n  //This is intended to handle the user's choice (doctor, patient, admin)\n  const [user, setUser] = useState(\"\");\n\n  //useNavigate is used to keep the user's URL on the correct page each time they use the buttons.\n  const navigate = useNavigate();\n\n  /* \r\n  \r\n  These three functions are used to create the header navigation\r\n  once you have logged in and pressed submit.\r\n    */\n\n  const createLinks = links => {\n    for (let i = 0; i < links.length; i++) {\n      headerLinks.push(links[i]);\n    }\n  };\n  const createLabels = labels => {\n    for (let i = 0; i < labels.length; i++) {\n      headerLabels.push(labels[i]);\n    }\n  };\n  const createRoutes = routes => {\n    for (let i = 0; i < routes.length; i++) {\n      headerRoutes.push(routes[i]);\n    }\n\n    //Once login is finished, it is removed and back is presented above other components\n    setLoginIsVisible(false);\n    setBackIsVisible(true);\n  };\n\n  //Finally, this sets up the routes for the links displayed on the header\n  const createFinalRoutes = () => {\n    //Setting the state of header elements\n    setHeader({\n      linkState: headerLinks,\n      labelState: headerLabels,\n      routerState: headerRoutes\n    });\n\n    //This if statement generates the amount of routes required based on the amount of labels and links to page components.\n    if (headerLinks.length > 0 && headerLabels.length > 0) {\n      for (let i = 0; i < headerLinks.length; i++) {\n        routeCreator.push( /*#__PURE__*/_jsxDEV(Route, {\n          path: header.linkState[i],\n          element: header.routerState[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this));\n      }\n    }\n  };\n  const handleNavigation = input => {\n    setUser(input);\n\n    //Navigate is used to automatically put user on the default page after logging in\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"header\",\n      children: /*#__PURE__*/_jsxDEV(Header, {\n        links: header.linkState,\n        labels: header.labelState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"govuk-width-container app-width-container\",\n      id: \"body\",\n      children: [backIsVisible && /*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: () => navigate(-1),\n        className: \"govuk-back-link\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [routeCreator, \";\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), (() => {\n        switch (user) {\n          case \"Patient\":\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: createFinalRoutes,\n              children: loginIsVisible && /*#__PURE__*/_jsxDEV(Login, {\n                userType: \"Patient\",\n                passLabels: createLabels,\n                passLinks: createLinks,\n                passRoutes: createRoutes\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this);\n          case \"Doctor\":\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: createFinalRoutes,\n              children: loginIsVisible && /*#__PURE__*/_jsxDEV(Login, {\n                userType: \"Doctor\",\n                passLabels: createLabels,\n                passLinks: createLinks,\n                passRoutes: createRoutes\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this);\n          case \"Admin\":\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: createFinalRoutes,\n              children: loginIsVisible && /*#__PURE__*/_jsxDEV(Login, {\n                userType: \"Admin\",\n                passLabels: createLabels,\n                passLinks: createLinks,\n                passRoutes: createRoutes\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this);\n\n          /*\r\n            The default case is a button,\r\n          the onButClick prop is used to determine the type of user, the user’s state is then updated to either doctor, patient and admin and then the type of login is chosen.\r\n            */\n          default:\n            return /*#__PURE__*/_jsxDEV(UserChoice, {\n              onButClick: handleNavigation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 22\n            }, this);\n        }\n      })()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"/govuk-frontend/all.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"uiD7MzX21YITevt3dOCCk9v0IRo=\", false, function () {\n  return [useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Route","Routes","useNavigate","Header","Footer","Login","UserChoice","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","headerLinks","headerLabels","headerRoutes","routeCreator","App","_s","header","setHeader","linkState","labelState","routerState","loginIsVisible","setLoginIsVisible","backIsVisible","setBackIsVisible","user","setUser","navigate","createLinks","links","i","length","push","createLabels","labels","createRoutes","routes","createFinalRoutes","path","element","fileName","_jsxFileName","lineNumber","columnNumber","handleNavigation","input","children","id","className","onClick","userType","passLabels","passLinks","passRoutes","onButClick","src","_c","$RefreshReg$"],"sources":["D:/University UE Projects/GroupProject/mybranch/SDGP-GroupF-React-project/project/src/App.tsx"],"sourcesContent":["import \"./components/css/styles.scss\";\r\nimport { Link, Route, Routes, useNavigate } from \"react-router-dom\"; //BrowserRouter isn't required because it exists in index.tsx\r\nimport Header from \"./components/uniComponents/Header\";\r\nimport Footer from \"./components/uniComponents/Footer\";\r\nimport Login from \"./components/uniComponents/Login\";\r\nimport UserChoice from \"./components/uniComponents/choiceComponents/UserChoice\";\r\nimport { useState } from \"react\";\r\n\r\n/*\r\n\r\nThe way routing is setup is like so: depending on which user button is chosen (admin, doctor, patient), \r\nthe login component passes three arrays containing links, labels and routes to this component (main), \r\nthese arrays are then put through the create functions (createLinks, labels, etcetera…) and they push \r\nthose array elements into the headerLabels, headerLinks and headerRoutes arrays here, finally the \r\ncreateFinalRoutes function is used to create the routes and the links and labels are put into the header \r\ncomponent’s props, and those are used to create the elements in the header that are used to navigate.\r\n\r\n*/\r\n\r\n//These 3 constants, header links, labels and routes are all used for navigation.\r\n\r\nlet headerLinks: string[] = [];\r\nlet headerLabels: string[] = [];\r\nlet headerRoutes: React.ReactElement[] = [];\r\n\r\nlet routeCreator: React.ReactElement[] = []; //This is array is used to store our route components, which are later put on the site\r\n\r\nfunction App() {\r\n  //Interface is defined for useState\r\n  interface headerState {\r\n    linkState: string[];\r\n    labelState: string[];\r\n    routerState: React.ReactElement[];\r\n  }\r\n\r\n  //This useState is used to update the header depending on the type of user (doctor, patient, etcetera...)\r\n  const [header, setHeader] = useState<headerState>({\r\n    linkState: headerLinks,\r\n    labelState: headerLabels,\r\n    routerState: headerRoutes,\r\n  });\r\n\r\n  //Used for setting visibility upon login\r\n  const [loginIsVisible, setLoginIsVisible] = useState<boolean>(true);\r\n  const [backIsVisible, setBackIsVisible] = useState<boolean>(false);\r\n\r\n  //This is intended to handle the user's choice (doctor, patient, admin)\r\n  const [user, setUser] = useState(\"\");\r\n\r\n  //useNavigate is used to keep the user's URL on the correct page each time they use the buttons.\r\n  const navigate = useNavigate();\r\n\r\n  /* \r\n  \r\n  These three functions are used to create the header navigation\r\n  once you have logged in and pressed submit.\r\n\r\n  */\r\n\r\n  const createLinks = (links: string[]) => {\r\n    for (let i = 0; i < links.length; i++) {\r\n      headerLinks.push(links[i]);\r\n    }\r\n  };\r\n\r\n  const createLabels = (labels: string[]) => {\r\n    for (let i = 0; i < labels.length; i++) {\r\n      headerLabels.push(labels[i]);\r\n    }\r\n  };\r\n\r\n  const createRoutes = (routes: React.ReactElement[]) => {\r\n    for (let i = 0; i < routes.length; i++) {\r\n      headerRoutes.push(routes[i]);\r\n    }\r\n\r\n    //Once login is finished, it is removed and back is presented above other components\r\n    setLoginIsVisible(false);\r\n    setBackIsVisible(true);\r\n  };\r\n\r\n  //Finally, this sets up the routes for the links displayed on the header\r\n  const createFinalRoutes = () => {\r\n    //Setting the state of header elements\r\n    setHeader({\r\n      linkState: headerLinks,\r\n      labelState: headerLabels,\r\n      routerState: headerRoutes,\r\n    });\r\n\r\n    //This if statement generates the amount of routes required based on the amount of labels and links to page components.\r\n    if (headerLinks.length > 0 && headerLabels.length > 0) {\r\n      for (let i = 0; i < headerLinks.length; i++) {\r\n        routeCreator.push(\r\n          <Route path={header.linkState[i]} element={header.routerState[i]} />\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleNavigation = (input: string) => {\r\n    setUser(input);\r\n\r\n    //Navigate is used to automatically put user on the default page after logging in\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* The header, the above link and label variables are passed here */}\r\n      <div id=\"header\">\r\n        <Header links={header.linkState} labels={header.labelState} />\r\n      </div>\r\n\r\n      <div className=\"govuk-width-container app-width-container\" id=\"body\">\r\n        {/* Back Button */}\r\n        {backIsVisible && (\r\n          <a onClick={() => navigate(-1)} className=\"govuk-back-link\">\r\n            Back\r\n          </a>\r\n        )}\r\n\r\n        {/* RouteCreator function is used to automatically create routes based on routeState and routeHeader variables */}\r\n        <Routes>{routeCreator};</Routes>\r\n\r\n        {/* This switch case checks the user use-state, which is defined depending on the user button pressed. */}\r\n        {(() => {\r\n          switch (user) {\r\n            case \"Patient\":\r\n              return (\r\n                <div onClick={createFinalRoutes}>\r\n                  {loginIsVisible && (\r\n                    <Login\r\n                      userType=\"Patient\"\r\n                      passLabels={createLabels}\r\n                      passLinks={createLinks}\r\n                      passRoutes={createRoutes}\r\n                    />\r\n                  )}\r\n                </div>\r\n              );\r\n            case \"Doctor\":\r\n              return (\r\n                <div onClick={createFinalRoutes}>\r\n                  {loginIsVisible && (\r\n                    <Login\r\n                      userType=\"Doctor\"\r\n                      passLabels={createLabels}\r\n                      passLinks={createLinks}\r\n                      passRoutes={createRoutes}\r\n                    />\r\n                  )}\r\n                </div>\r\n              );\r\n            case \"Admin\":\r\n              return (\r\n                <div onClick={createFinalRoutes}>\r\n                  {loginIsVisible && (\r\n                    <Login\r\n                      userType=\"Admin\"\r\n                      passLabels={createLabels}\r\n                      passLinks={createLinks}\r\n                      passRoutes={createRoutes}\r\n                    />\r\n                  )}\r\n                </div>\r\n              );\r\n\r\n            /*\r\n\r\n            The default case is a button,\r\n            the onButClick prop is used to determine the type of user, the user’s state is then updated to either doctor, patient and admin and then the type of login is chosen.\r\n\r\n            */\r\n            default:\r\n              return <UserChoice onButClick={handleNavigation} />;\r\n          }\r\n        })()}\r\n      </div>\r\n      <div id=\"footer\">\r\n        <Footer />\r\n      </div>\r\n      <script src=\"/govuk-frontend/all.js\"></script>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}